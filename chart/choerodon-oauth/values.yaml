# Default values for choerodon-oauth.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: registry.choerodon.com.cn/hzero-hzero/choerodon-oauth
  pullPolicy: Always

## Deployment 更新策略
deploymentUpdate:
  type: RollingUpdate
  maxUnavailable: 0
  maxSurge: 100%

## Pod 优先级设置
## ref: https://kubernetes.io/docs/concepts/configuration/pod-priority-preemption/
##
priorityClassName: ""

## Pod 节点分配
## ref: https://kubernetes.io/docs/user-guide/node-selection/
##
nodeSelector: {}
tolerations: []
affinity: {}

## 给 Pod 附加的 annotations
podAnnotations: {}

## ## Pod 附加的 labels
podLabels: {}

env:
  open:
    # 本实例服务端口
    SERVER_PORT: 8020
    # 本实例管理端口
    MANAGEMENT_SERVER_PORT: 8021
    # 认证服务器 自定义资源匹配器
    HZERO_OAUTH_CUSTOM_RESOURCE_MATCHER: false
    # 验证 client 时不检查 client 的一致性
    HZERO_OAUTH_NOT_CHECK_CLIENT_EQUALS: false
    # 始终开启图形验证码校验，默认否
    HZERO_OAUTH_ENABLE_ALWAYS_CAPTCHA: false
    # 登录页面
    HZERO_OAUTH_LOGIN_PAGE: /choerodon/login
    #网关是否启用https
    HZERO_OAUTH_LOGIN_ENABLE_HTTPS: false
    # 允许使用的登录名，默认有 用户名、邮箱、手机号
    HZERO_OAUTH_LOGIN_SUPPORT_FIELDS: username,email,phone
    # 前端默认模板
    HZERO_OAUTH_LOGIN_DEFAULT_TEMPLATE: slide
    # 默认登录成功跳转地址
    HZERO_OAUTH_LOGIN_SUCCESS_URL: http://api.example.com
    # 默认客户端
    HZERO_OAUTH_LOGIN_DEFAULT_CLIENT_ID: choerodonparent
    # 退出时是否清理token
    HZERO_OAUTH_LOGOUT_CLEAR_TOKEN: true
    # 启用二级域名单点登录
    HZERO_OAUTH_SSO_ENABLED: true
    # 网关域
    HZERO_GATEWAY_URL: http://api.example.com
    # Eureka 注册中心地址
    EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://dev.hzero.org:8000/eureka/
    # 服务以IP地址注册
    EUREKA_INSTANCE_PREFER_IP_ADDRESS: true
    # 数据库地址
    SPRING_DATASOURCE_URL: jdbc:mysql://db.hzero.org:3306/hzero_platform?useUnicode=true&characterEncoding=utf-8&useSSL=false
    # 数据库用户名
    SPRING_DATASOURCE_USERNAME: hzero
    # 数据库密码
    SPRING_DATASOURCE_PASSWORD: hzero
    # 连接池最小空闲连接数
    SPRING_DATASOURCE_MINIMUM_IDLE: 20
    # 连接池允许的最大连接数
    SPRING_DATASOURCE_MAXIMUM_POOL_SIZE: 200
    # Redis host
    SPRING_REDIS_HOST: redis.hzero.org
    # Redis Port
    SPRING_REDIS_PORT: 6379
    # Redis DB
    SPRING_REDIS_DATABASE: 3
    # 续约间隔时间，默认30秒
    EUREKA_INSTANCE_LEASE_RENEWAL_INTERVAL_IN_SECONDS: 30
    # 实例故障摘除时间，默认90秒，实际是90*2=180秒，配置45就是90秒
    EUREKA_INSTANCE_LEASE_EXPIRATION_DURATION_IN_SECONDS: 45
    # 连接超时
    FEIGN_CLIENT_CONFIG_DEFAULT_CONNECT_TIMEOUT: 2000
    # 读取超时
    FEIGN_CLIENT_CONFIG_DEFAULT_READ_TIMEOUT: 5000
    # 日志级别
    LOG_LEVEL: info
    HZERO_OAUTH_BASE_URL: http://api.example.com/oauth
    CHOERODON_COOKIE_SAMESITE: lax
    CHOERODON_COOKIE_SECURE: false

#    # 备案号
#    CHOERODON_DEFAULT_ICP:
#    # 公司
#    CHOERODON_DEFAULT_COMPANY:
#    JAVA_OPTS: >-
#      -Xms1024m
#      -Xmx1536m
    ## Skywalking 配置参数
    # SKYWALKING_OPTS: >-
    #   -javaagent:/agent/skywalking-agent.jar
    #   -Dskywalking.agent.application_code=asgard-service
    #   -Dskywalking.agent.sample_n_per_3_secs=-1
    #   -Dskywalking.collector.backend_service=oap.skywalking:11800



## Liveness 和 Readiness 探针相关配置
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/
livenessProbe:
  initialDelaySeconds: 180
  periodSeconds: 30
  timeoutSeconds: 3
  successThreshold: 1
  failureThreshold: 3
readinessProbe:
  initialDelaySeconds: 5
  periodSeconds: 15
  timeoutSeconds: 3
  successThreshold: 1
  failureThreshold: 3

## 资源请求和限制相关配置
## ref: http://kubernetes.io/docs/user-guide/compute-resources/
##
resources:
  limits:
    # cpu: 100m
    memory: 2Gi
  requests:
    # cpu: 100m
    memory: 2Gi

## 插件相关配置
plugins:
  # skywalking agent 镜像地址
  skywalkingAgentImage: registry.cn-shanghai.aliyuncs.com/c7n/skywalking-agent:6.6.0

## service 相关设置
## ref: http://kubernetes.io/docs/user-guide/services/
##
service:
  # 是否启用 service 暴露本服务
  enabled: true
  # Service 名称
  name: choerodon-oauth
  # Service 类型
  type: ClusterIP
  # 指定 service 的 clusterIP
  clusterIP: ~
  # 端口设置
  ports:
    # 服务端口
    http:
      port: 8020
      nodePort: 30098
    # 管理端口
    actuator:
      port: 8021
      nodePort: 30099
  ## externalIPs 设置
  # externalIPs:
  #   - externalIp1
  annotations: {}
    # prometheus.io/scrape: 'true'
    # prometheus.io/path: '/actuator/prometheus'
  # prometheus.io/port: '8021'

## 指标收集
metrics:
  # 收集应用的指标数据路径
  path: /actuator/prometheus
  # 性能指标应用分组
  group: spring-boot

# 是否收集日志至EFK
logs:
  enabled: false
  # 日志收集格式
  parser: spring-boot